<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="nbody__lib_8c" kind="file" language="C++">
    <compoundname>nbody_lib.c</compoundname>
    <includes refid="nbody__lib_8h" local="yes">nbody_lib.h</includes>
    <incdepgraph>
      <node id="7">
        <label>float.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="6">
        <label>string.h</label>
      </node>
      <node id="4">
        <label>time.h</label>
      </node>
      <node id="5">
        <label>math.h</label>
      </node>
      <node id="8">
        <label>sys/time.h</label>
      </node>
      <node id="9">
        <label>nbody_types.h</label>
        <link refid="nbody__types_8h"/>
      </node>
      <node id="0">
        <label>nbody_lib.c</label>
        <link refid="nbody__lib_8c"/>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>nbody_lib.h</label>
        <link refid="nbody__lib_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structnode" prot="public">node</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="nbody__lib_8c_1ae0b865aeb3a8ca1bc05b13a0ffc168c6" prot="public" static="no">
        <type>struct <ref refid="structnode" kindref="compound">node</ref> *</type>
        <definition>typedef struct node* pNodeStruct</definition>
        <argsstring></argsstring>
        <name>pNodeStruct</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbody_lib.c" line="159" column="1" bodyfile="nbody_lib.c" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nbody__lib_8c_1ad7f3771c3b3f656b52491140244956ae" prot="public" static="no">
        <type>struct <ref refid="structnode" kindref="compound">node</ref></type>
        <definition>typedef struct node  NodeStruct</definition>
        <argsstring></argsstring>
        <name>NodeStruct</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbody_lib.c" line="163" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="nbody__lib_8c_1a7848443fac8d79e63d84dcc64ea3bed9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nbody_linkedlist_test1</definition>
        <argsstring>()</argsstring>
        <name>nbody_linkedlist_test1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Library. </para>        </detaileddescription>
        <inbodydescription>
<para>The list </para>        </inbodydescription>
        <location file="nbody_lib.c" line="8" column="1" bodyfile="nbody_lib.c" bodystart="8" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="nbody__lib_8c_1a048e5001a6da516d0c09ac2de9c4d18d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nbody_linkedlist_size</definition>
        <argsstring>(LinkedList *list)</argsstring>
        <name>nbody_linkedlist_size</name>
        <param>
          <type><ref refid="struct_linked_list" kindref="compound">LinkedList</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbody_lib.c" line="34" column="1" bodyfile="nbody_lib.c" bodystart="34" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="nbody__lib_8c_1abee78561ce2c77f7dd6f53c765e340e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_linked_list" kindref="compound">LinkedList</ref> *</type>
        <definition>LinkedList* nbody_linkedlist_new</definition>
        <argsstring>()</argsstring>
        <name>nbody_linkedlist_new</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbody_lib.c" line="46" column="1" bodyfile="nbody_lib.c" bodystart="46" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="nbody__lib_8c_1a12473aa3505cb1f8545103441ed4ff2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nbody_linkedlist_add</definition>
        <argsstring>(LinkedList *list, void *data)</argsstring>
        <name>nbody_linkedlist_add</name>
        <param>
          <type><ref refid="struct_linked_list" kindref="compound">LinkedList</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbody_lib.c" line="54" column="1" bodyfile="nbody_lib.c" bodystart="54" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="nbody__lib_8c_1adb00939603ffda8e425b21211370a6c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nbody_linkedlist_destroy</definition>
        <argsstring>(LinkedList *list)</argsstring>
        <name>nbody_linkedlist_destroy</name>
        <param>
          <type><ref refid="struct_linked_list" kindref="compound">LinkedList</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbody_lib.c" line="76" column="1" bodyfile="nbody_lib.c" bodystart="76" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="nbody__lib_8c_1a6f11828be4486055ba7d4232559263e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nbody_forwardeuler</definition>
        <argsstring>(double *r, double *v, double *a, double dt, int n, int d, double *m, double G)</argsstring>
        <name>nbody_forwardeuler</name>
        <param>
          <type>double *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>double</type>
          <declname>G</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbody_lib.c" line="91" column="1" bodyfile="nbody_lib.c" bodystart="91" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="nbody__lib_8c_1a5ec945bfee9fedea940508cb2e23fe0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nbody_freebodylist</definition>
        <argsstring>(BodyList **bodylist)</argsstring>
        <name>nbody_freebodylist</name>
        <param>
          <type><ref refid="struct_body_list" kindref="compound">BodyList</ref> **</type>
          <declname>bodylist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbody_lib.c" line="101" column="1" bodyfile="nbody_lib.c" bodystart="101" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="nbody__lib_8c_1a0c2c8e5e8a1e1d7b7c26e8ad9f14fd56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nbody_addbinlist</definition>
        <argsstring>(Bin **binlist, Body *body)</argsstring>
        <name>nbody_addbinlist</name>
        <param>
          <type><ref refid="struct_bin" kindref="compound">Bin</ref> **</type>
          <declname>binlist</declname>
        </param>
        <param>
          <type><ref refid="struct_body" kindref="compound">Body</ref> *</type>
          <declname>body</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbody_lib.c" line="117" column="1" bodyfile="nbody_lib.c" bodystart="117" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="nbody__lib_8c_1aeffd7a0874832315fcc560eb59bdf706" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_body_list" kindref="compound">BodyList</ref> *</type>
        <definition>BodyList* nbody_addbodylist</definition>
        <argsstring>(BodyList **bodylist, Body *body)</argsstring>
        <name>nbody_addbodylist</name>
        <param>
          <type><ref refid="struct_body_list" kindref="compound">BodyList</ref> **</type>
          <declname>bodylist</declname>
        </param>
        <param>
          <type><ref refid="struct_body" kindref="compound">Body</ref> *</type>
          <declname>body</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbody_lib.c" line="123" column="1" bodyfile="nbody_lib.c" bodystart="123" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="nbody__lib_8c_1ad1a51604307c23e4a1a122adbded1a2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nbody_printbodylist</definition>
        <argsstring>(BodyList *head)</argsstring>
        <name>nbody_printbodylist</name>
        <param>
          <type><ref refid="struct_body_list" kindref="compound">BodyList</ref> *</type>
          <declname>head</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbody_lib.c" line="148" column="1" bodyfile="nbody_lib.c" bodystart="148" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="nbody__lib_8c_1adf71dc6eb1bc7865c8091c9fe07a06b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nbody_createBox</definition>
        <argsstring>(SimulationBox *box, BodyList *list)</argsstring>
        <name>nbody_createBox</name>
        <param>
          <type><ref refid="struct_simulation_box" kindref="compound">SimulationBox</ref> *</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="struct_body_list" kindref="compound">BodyList</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbody_lib.c" line="165" column="1" bodyfile="nbody_lib.c" bodystart="165" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="nbody__lib_8c_1a228fe127259a13a5bc8e4da45c44c0bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_body" kindref="compound">Body</ref> *</type>
        <definition>Body* nbody_resetbody</definition>
        <argsstring>(Body *body)</argsstring>
        <name>nbody_resetbody</name>
        <param>
          <type><ref refid="struct_body" kindref="compound">Body</ref> *</type>
          <declname>body</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbody_lib.c" line="182" column="1" bodyfile="nbody_lib.c" bodystart="182" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="nbody__lib_8c_1aaaa54e16825873c95b8ba760808a8e0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_body" kindref="compound">Body</ref> *</type>
        <definition>Body* nbody_newrandbody</definition>
        <argsstring>()</argsstring>
        <name>nbody_newrandbody</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbody_lib.c" line="195" column="1" bodyfile="nbody_lib.c" bodystart="195" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="nbody__lib_8c_1a372c1e36d7d677a5c2e6aec56e0c4886" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_body" kindref="compound">Body</ref> *</type>
        <definition>Body* nbody_newbody</definition>
        <argsstring>(double mass, double *location, double *velocity)</argsstring>
        <name>nbody_newbody</name>
        <param>
          <type>double</type>
          <declname>mass</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>location</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>velocity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbody_lib.c" line="210" column="1" bodyfile="nbody_lib.c" bodystart="210" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="nbody__lib_8c_1a34414124005e7d0e4e2def0e2b49de8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_body" kindref="compound">Body</ref> *</type>
        <definition>Body* nbody_newzerobody</definition>
        <argsstring>()</argsstring>
        <name>nbody_newzerobody</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbody_lib.c" line="227" column="1" bodyfile="nbody_lib.c" bodystart="227" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="nbody__lib_8c_1af1fad81653612ede339dde94dd8f76ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nbody_printbody</definition>
        <argsstring>(Body *body)</argsstring>
        <name>nbody_printbody</name>
        <param>
          <type><ref refid="struct_body" kindref="compound">Body</ref> *</type>
          <declname>body</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbody_lib.c" line="242" column="1" bodyfile="nbody_lib.c" bodystart="242" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="nbody__lib_8c_1a160c2cba5e830d622e2df66d7ee9f7e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nbody_acceleration</definition>
        <argsstring>(double *a, double *r, int n, int d, double *m, double G)</argsstring>
        <name>nbody_acceleration</name>
        <param>
          <type>double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>double</type>
          <declname>G</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbody_lib.c" line="252" column="1" bodyfile="nbody_lib.c" bodystart="252" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="nbody__lib_8c_1a657cdcb1e74333481abd88338119c35c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nbody_energy</definition>
        <argsstring>(double *pot, double *kin, double *tot, double *r, double *v, int n, int d, double *m, double G)</argsstring>
        <name>nbody_energy</name>
        <param>
          <type>double *</type>
          <declname>pot</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>kin</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tot</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>double</type>
          <declname>G</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbody_lib.c" line="276" column="1" bodyfile="nbody_lib.c" bodystart="276" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="nbody__lib_8c_1a8e15606e5734bbface85c518c8f2f481" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nbody_print_body</definition>
        <argsstring>(double *r, double *v, double *a, int i)</argsstring>
        <name>nbody_print_body</name>
        <param>
          <type>double *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbody_lib.c" line="310" column="1" bodyfile="nbody_lib.c" bodystart="310" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="nbody__lib_8c_1a868936f1ea2879aea2257bb0b4d64666" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nbody_print_energy</definition>
        <argsstring>(double pot0, double kin0, double tot0, double pot, double kin, double tot)</argsstring>
        <name>nbody_print_energy</name>
        <param>
          <type>double</type>
          <declname>pot0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>kin0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tot0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>pot</declname>
        </param>
        <param>
          <type>double</type>
          <declname>kin</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbody_lib.c" line="316" column="1" bodyfile="nbody_lib.c" bodystart="316" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="nbody__lib_8c_1ab78dff6daa4cbf2f1c1253f1ba54e16e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nbody_read_ini</definition>
        <argsstring>(char *filename, int *n, int *d, double **m, double **r, double **v)</argsstring>
        <name>nbody_read_ini</name>
        <param>
          <type>char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>double **</type>
          <declname>m</declname>
        </param>
        <param>
          <type>double **</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double **</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbody_lib.c" line="321" column="1" bodyfile="nbody_lib.c" bodystart="321" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="nbody__lib_8c_1a0bbf0022c12442a1bcad51cc9c04e0bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nbody_read_bodies</definition>
        <argsstring>(char *filename, int *n, BodyList **bodylist)</argsstring>
        <name>nbody_read_bodies</name>
        <param>
          <type>char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="struct_body_list" kindref="compound">BodyList</ref> **</type>
          <declname>bodylist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbody_lib.c" line="340" column="1" bodyfile="nbody_lib.c" bodystart="340" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="nbody__lib_8c_1a9622aef03e176a55548849c8ff8353b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nbody_leapfrog</definition>
        <argsstring>(double *r, double *v, double *a, double *a1, double dt, int n, int d, double *m, double G)</argsstring>
        <name>nbody_leapfrog</name>
        <param>
          <type>double *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>double</type>
          <declname>G</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbody_lib.c" line="381" column="1" bodyfile="nbody_lib.c" bodystart="381" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="nbody__lib_8c_1a29d0c25e1dd2d6aefa1d56708364fa60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nbody_test_eight</definition>
        <argsstring>()</argsstring>
        <name>nbody_test_eight</name>
        <briefdescription>
<para>Eight test. </para>        </briefdescription>
        <detaileddescription>
<para>Long definition. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbody_lib.c" line="392" column="1" bodyfile="nbody_lib.c" bodystart="392" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="nbody__lib_8c_1ab5d294221f53bdee8dd85fa5d728f594" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nbody_zeros</definition>
        <argsstring>(double *x, int n)</argsstring>
        <name>nbody_zeros</name>
        <param>
          <type>double *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbody_lib.c" line="439" column="1" bodyfile="nbody_lib.c" bodystart="439" bodyend="444"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="5"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="nbody__lib_8h" kindref="compound">nbody_lib.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8" refid="nbody__lib_8h_1a7848443fac8d79e63d84dcc64ea3bed9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="nbody__lib_8c_1a7848443fac8d79e63d84dcc64ea3bed9" kindref="member">nbody_linkedlist_test1</ref>()</highlight></codeline>
<codeline lineno="9"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_linked_list" kindref="compound">LinkedList</ref><sp/>*list;<sp/></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_linked_list_element" kindref="compound">LinkedListElement</ref><sp/>*curr;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_body" kindref="compound">Body</ref><sp/>x[10];</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>list<sp/>=<sp/><ref refid="nbody__lib_8c_1abee78561ce2c77f7dd6f53c765e340e7" kindref="member">nbody_linkedlist_new</ref>();</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;10;i++)</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="nbody__lib_8c_1a228fe127259a13a5bc8e4da45c44c0bc" kindref="member">nbody_resetbody</ref>(x+i);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="nbody__lib_8c_1a12473aa3505cb1f8545103441ed4ff2c" kindref="member">nbody_linkedlist_add</ref>(list,&amp;x[i]);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Size<sp/>of<sp/>the<sp/>list:<sp/>%d\n&quot;</highlight><highlight class="normal">,<ref refid="nbody__lib_8c_1a048e5001a6da516d0c09ac2de9c4d18d" kindref="member">nbody_linkedlist_size</ref>(list));</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Printfing<sp/>from<sp/>tail<sp/>to<sp/>head\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>curr=list-&gt;<ref refid="struct_linked_list_1a8bc37f643ec6dee9b1a03872b546fd5b" kindref="member">tail</ref>;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(curr<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="nbody__lib_8c_1af1fad81653612ede339dde94dd8f76ca" kindref="member">nbody_printbody</ref>((<ref refid="struct_body" kindref="compound">Body</ref><sp/>*)curr-&gt;<ref refid="struct_linked_list_element_1a735984d41155bc1032e09bece8f8d66d" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr<sp/>=<sp/>curr-&gt;<ref refid="struct_linked_list_element_1ab2a338dd2c3ebf3033210507766f2529" kindref="member">prev</ref>;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="nbody__lib_8c_1adb00939603ffda8e425b21211370a6c4" kindref="member">nbody_linkedlist_destroy</ref>(list);</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34" refid="nbody__lib_8h_1a048e5001a6da516d0c09ac2de9c4d18d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="nbody__lib_8c_1a048e5001a6da516d0c09ac2de9c4d18d" kindref="member">nbody_linkedlist_size</ref>(<ref refid="struct_linked_list" kindref="compound">LinkedList</ref><sp/>*list)</highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_linked_list_element" kindref="compound">LinkedListElement</ref><sp/>*curr;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>curr<sp/>=<sp/>list-&gt;<ref refid="struct_linked_list_1a92842e4a76a05ad592d19f07a60db019" kindref="member">head</ref>;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(curr<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>size<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr=curr-&gt;<ref refid="struct_linked_list_element_1a475866f9885e1659a1704a6b24c81af2" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46" refid="nbody__lib_8h_1abee78561ce2c77f7dd6f53c765e340e7" refkind="member"><highlight class="normal"><ref refid="struct_linked_list" kindref="compound">LinkedList</ref><sp/>*<ref refid="nbody__lib_8c_1abee78561ce2c77f7dd6f53c765e340e7" kindref="member">nbody_linkedlist_new</ref>()</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_linked_list" kindref="compound">LinkedList</ref><sp/>*newlist<sp/>;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>newlist<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_linked_list" kindref="compound">LinkedList</ref>));</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>newlist-&gt;<ref refid="struct_linked_list_1a92842e4a76a05ad592d19f07a60db019" kindref="member">head</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>newlist-&gt;<ref refid="struct_linked_list_1a8bc37f643ec6dee9b1a03872b546fd5b" kindref="member">tail</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newlist;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54" refid="nbody__lib_8h_1a12473aa3505cb1f8545103441ed4ff2c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="nbody__lib_8c_1a12473aa3505cb1f8545103441ed4ff2c" kindref="member">nbody_linkedlist_add</ref>(<ref refid="struct_linked_list" kindref="compound">LinkedList</ref><sp/>*list,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data)</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_linked_list_element" kindref="compound">LinkedListElement</ref><sp/>*item;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>item<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_linked_list_element" kindref="compound">LinkedListElement</ref>));</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_linked_list_element_1a735984d41155bc1032e09bece8f8d66d" kindref="member">data</ref><sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_linked_list_element_1a475866f9885e1659a1704a6b24c81af2" kindref="member">next</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_linked_list_element_1ab2a338dd2c3ebf3033210507766f2529" kindref="member">prev</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>list<sp/>is<sp/>empty<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>list-&gt;<ref refid="struct_linked_list_1a8bc37f643ec6dee9b1a03872b546fd5b" kindref="member">tail</ref><sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list-&gt;<ref refid="struct_linked_list_1a92842e4a76a05ad592d19f07a60db019" kindref="member">head</ref><sp/>=<sp/>item;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list-&gt;<ref refid="struct_linked_list_1a8bc37f643ec6dee9b1a03872b546fd5b" kindref="member">tail</ref><sp/>=<sp/>item;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct_linked_list_element_1ab2a338dd2c3ebf3033210507766f2529" kindref="member">prev</ref><sp/>=<sp/>list-&gt;<ref refid="struct_linked_list_1a8bc37f643ec6dee9b1a03872b546fd5b" kindref="member">tail</ref>;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list-&gt;<ref refid="struct_linked_list_1a8bc37f643ec6dee9b1a03872b546fd5b" kindref="member">tail</ref>-&gt;<ref refid="struct_linked_list_element_1a475866f9885e1659a1704a6b24c81af2" kindref="member">next</ref><sp/>=<sp/>item;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list-&gt;<ref refid="struct_linked_list_1a8bc37f643ec6dee9b1a03872b546fd5b" kindref="member">tail</ref><sp/>=<sp/>item;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="nbody__lib_8h_1adb00939603ffda8e425b21211370a6c4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="nbody__lib_8c_1adb00939603ffda8e425b21211370a6c4" kindref="member">nbody_linkedlist_destroy</ref>(<ref refid="struct_linked_list" kindref="compound">LinkedList</ref><sp/>*list)</highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_linked_list_element" kindref="compound">LinkedListElement</ref><sp/>*current,<sp/>*next;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>current<sp/>=<sp/>list-&gt;<ref refid="struct_linked_list_1a92842e4a76a05ad592d19f07a60db019" kindref="member">head</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next=current-&gt;<ref refid="struct_linked_list_element_1a475866f9885e1659a1704a6b24c81af2" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(current);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current=next;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>free(list);</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="nbody__lib_8h_1a6f11828be4486055ba7d4232559263e3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="nbody__lib_8c_1a6f11828be4486055ba7d4232559263e3" kindref="member">nbody_forwardeuler</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*r,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*v,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*a,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*m,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>G)</highlight></codeline>
<codeline lineno="92"><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="nbody__lib_8c_1a160c2cba5e830d622e2df66d7ee9f7e5" kindref="member">nbody_acceleration</ref>(a,r,n,d,m,G);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;n*d;i++)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r[i]<sp/>+=<sp/>v[i]*dt<sp/>;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;n*d;i++)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>+=<sp/>a[i]*dt<sp/>;</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="nbody__lib_8h_1a5ec945bfee9fedea940508cb2e23fe0f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="nbody__lib_8c_1a5ec945bfee9fedea940508cb2e23fe0f" kindref="member">nbody_freebodylist</ref>(<ref refid="struct_body_list" kindref="compound">BodyList</ref><sp/>**bodylist)</highlight></codeline>
<codeline lineno="102"><highlight class="normal">{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_body_list" kindref="compound">BodyList</ref><sp/>*current,*next;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>current<sp/>=<sp/>*bodylist<sp/>;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current-&gt;<ref refid="struct_body_list_1ab63aea1170041eff3f6b711fcf1b8784" kindref="member">next</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>current-&gt;<ref refid="struct_body_list_1ab63aea1170041eff3f6b711fcf1b8784" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(current-&gt;<ref refid="struct_body_list_1a5d4b20fb6acb8bdb769db95280c18dcb" kindref="member">body</ref>);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(current);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>free(current-&gt;<ref refid="struct_body_list_1a5d4b20fb6acb8bdb769db95280c18dcb" kindref="member">body</ref>);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>free(current);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>*bodylist<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="nbody__lib_8c_1a0c2c8e5e8a1e1d7b7c26e8ad9f14fd56" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="nbody__lib_8c_1a0c2c8e5e8a1e1d7b7c26e8ad9f14fd56" kindref="member">nbody_addbinlist</ref>(<ref refid="struct_bin" kindref="compound">Bin</ref><sp/>**binlist,<ref refid="struct_body" kindref="compound">Body</ref><sp/>*body)</highlight></codeline>
<codeline lineno="118"><highlight class="normal">{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="nbody__lib_8h_1aeffd7a0874832315fcc560eb59bdf706" refkind="member"><highlight class="normal"><ref refid="struct_body_list" kindref="compound">BodyList</ref><sp/>*<ref refid="nbody__lib_8c_1aeffd7a0874832315fcc560eb59bdf706" kindref="member">nbody_addbodylist</ref>(<ref refid="struct_body_list" kindref="compound">BodyList</ref><sp/>**bodylist,<ref refid="struct_body" kindref="compound">Body</ref><sp/>*body)</highlight></codeline>
<codeline lineno="124"><highlight class="normal">{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_body_list" kindref="compound">BodyList</ref><sp/>*newnode<sp/>;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_body_list" kindref="compound">BodyList</ref><sp/>*current;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>newnode<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_body_list" kindref="compound">BodyList</ref>));</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>newnode-&gt;<ref refid="struct_body_list_1a5d4b20fb6acb8bdb769db95280c18dcb" kindref="member">body</ref><sp/>=<sp/>body;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>newnode-&gt;<ref refid="struct_body_list_1ab63aea1170041eff3f6b711fcf1b8784" kindref="member">next</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>current<sp/>=<sp/>*bodylist;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*bodylist<sp/>=<sp/>newnode;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current-&gt;<ref refid="struct_body_list_1ab63aea1170041eff3f6b711fcf1b8784" kindref="member">next</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>current-&gt;<ref refid="struct_body_list_1ab63aea1170041eff3f6b711fcf1b8784" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current-&gt;<ref refid="struct_body_list_1ab63aea1170041eff3f6b711fcf1b8784" kindref="member">next</ref><sp/>=<sp/>newnode;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newnode;</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="nbody__lib_8h_1ad1a51604307c23e4a1a122adbded1a2f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="nbody__lib_8c_1ad1a51604307c23e4a1a122adbded1a2f" kindref="member">nbody_printbodylist</ref>(<ref refid="struct_body_list" kindref="compound">BodyList</ref><sp/>*head)</highlight></codeline>
<codeline lineno="149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_body_list" kindref="compound">BodyList</ref><sp/>*current;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>current<sp/>=<sp/>head;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="nbody__lib_8c_1af1fad81653612ede339dde94dd8f76ca" kindref="member">nbody_printbody</ref>(current-&gt;<ref refid="struct_body_list_1a5d4b20fb6acb8bdb769db95280c18dcb" kindref="member">body</ref>);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>current-&gt;<ref refid="struct_body_list_1ab63aea1170041eff3f6b711fcf1b8784" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159" refid="nbody__lib_8c_1ae0b865aeb3a8ca1bc05b13a0ffc168c6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnode" kindref="compound">node</ref><sp/>*<sp/><ref refid="nbody__lib_8c_1ae0b865aeb3a8ca1bc05b13a0ffc168c6" kindref="member">pNodeStruct</ref>;</highlight></codeline>
<codeline lineno="160" refid="structnode" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnode" kindref="compound">node</ref><sp/>{</highlight></codeline>
<codeline lineno="161" refid="structnode_1a9eab91667db4d35c7231dcddf7b89a76" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structnode_1a9eab91667db4d35c7231dcddf7b89a76" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="162" refid="structnode_1ab73a0aa5004ac3891e3bdb8ca5e68a37" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>pNodeStruct<sp/><ref refid="structnode_1ab73a0aa5004ac3891e3bdb8ca5e68a37" kindref="member">pNext</ref>;</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}<sp/><ref refid="nbody__lib_8c_1ad7f3771c3b3f656b52491140244956ae" kindref="member">NodeStruct</ref>;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165" refid="nbody__lib_8h_1adf71dc6eb1bc7865c8091c9fe07a06b6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="nbody__lib_8c_1adf71dc6eb1bc7865c8091c9fe07a06b6" kindref="member">nbody_createBox</ref>(<ref refid="struct_simulation_box" kindref="compound">SimulationBox</ref><sp/>*box,<ref refid="struct_body_list" kindref="compound">BodyList</ref><sp/>*list)</highlight></codeline>
<codeline lineno="166"><highlight class="normal">{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_body_list" kindref="compound">BodyList</ref><sp/>*current;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minmax[3][2];</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;3;i++)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minmax[i][0]<sp/>=<sp/>DBL_MIN;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minmax[i][1]<sp/>=<sp/>DBL_MAX;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>current<sp/>=<sp/>list;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182" refid="nbody__lib_8h_1a228fe127259a13a5bc8e4da45c44c0bc" refkind="member"><highlight class="normal"><ref refid="struct_body" kindref="compound">Body</ref><sp/>*<ref refid="nbody__lib_8c_1a228fe127259a13a5bc8e4da45c44c0bc" kindref="member">nbody_resetbody</ref>(<ref refid="struct_body" kindref="compound">Body</ref><sp/>*body)</highlight></codeline>
<codeline lineno="183"><highlight class="normal">{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>body-&gt;<ref refid="struct_body_1a5175b356eac1d83a42608b42a25d00b9" kindref="member">m</ref><sp/>=<sp/>0.5;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;3;<sp/>i++)</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;<ref refid="struct_body_1a32028928bab6f6e926f89bf7c52c4138" kindref="member">r</ref>[i]<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;<ref refid="struct_body_1ad8b2664bf7d7db7f9685845624616041" kindref="member">v</ref>[i]<sp/>=<sp/>2.0;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;<ref refid="struct_body_1a74c08c3b509575a337bf62d564991340" kindref="member">f</ref>[i]<sp/>=<sp/>3.0;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>body;</highlight></codeline>
<codeline lineno="193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195" refid="nbody__lib_8h_1aaaa54e16825873c95b8ba760808a8e0d" refkind="member"><highlight class="normal"><ref refid="struct_body" kindref="compound">Body</ref><sp/>*<ref refid="nbody__lib_8c_1aaaa54e16825873c95b8ba760808a8e0d" kindref="member">nbody_newrandbody</ref>()</highlight></codeline>
<codeline lineno="196"><highlight class="normal">{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_body" kindref="compound">Body</ref><sp/>*body;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>body<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_body" kindref="compound">Body</ref>));</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>body-&gt;<ref refid="struct_body_1a5175b356eac1d83a42608b42a25d00b9" kindref="member">m</ref><sp/>=<sp/>(double)rand()/RAND_MAX;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;3;<sp/>i++)</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;<ref refid="struct_body_1a32028928bab6f6e926f89bf7c52c4138" kindref="member">r</ref>[i]<sp/>=<sp/>(double)rand()/RAND_MAX;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;<ref refid="struct_body_1ad8b2664bf7d7db7f9685845624616041" kindref="member">v</ref>[i]<sp/>=<sp/>(double)rand()/RAND_MAX;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;<ref refid="struct_body_1a74c08c3b509575a337bf62d564991340" kindref="member">f</ref>[i]<sp/>=<sp/>(double)rand()/RAND_MAX;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>body;</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210" refid="nbody__lib_8h_1a372c1e36d7d677a5c2e6aec56e0c4886" refkind="member"><highlight class="normal"><ref refid="struct_body" kindref="compound">Body</ref><sp/>*<ref refid="nbody__lib_8c_1a372c1e36d7d677a5c2e6aec56e0c4886" kindref="member">nbody_newbody</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mass,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*location,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*velocity)</highlight></codeline>
<codeline lineno="211"><highlight class="normal">{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_body" kindref="compound">Body</ref><sp/>*body;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>body<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_body" kindref="compound">Body</ref>));</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>body-&gt;<ref refid="struct_body_1a5175b356eac1d83a42608b42a25d00b9" kindref="member">m</ref><sp/>=<sp/>mass;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>body-&gt;<ref refid="struct_body_1a32028928bab6f6e926f89bf7c52c4138" kindref="member">r</ref>[0]<sp/>=<sp/>location[0];</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>body-&gt;<ref refid="struct_body_1a32028928bab6f6e926f89bf7c52c4138" kindref="member">r</ref>[1]<sp/>=<sp/>location[1];</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>body-&gt;<ref refid="struct_body_1a32028928bab6f6e926f89bf7c52c4138" kindref="member">r</ref>[2]<sp/>=<sp/>location[2];</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>body-&gt;<ref refid="struct_body_1ad8b2664bf7d7db7f9685845624616041" kindref="member">v</ref>[0]<sp/>=<sp/>velocity[0];</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>body-&gt;<ref refid="struct_body_1ad8b2664bf7d7db7f9685845624616041" kindref="member">v</ref>[1]<sp/>=<sp/>velocity[1];</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>body-&gt;<ref refid="struct_body_1ad8b2664bf7d7db7f9685845624616041" kindref="member">v</ref>[2]<sp/>=<sp/>velocity[2];</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>body-&gt;<ref refid="struct_body_1a74c08c3b509575a337bf62d564991340" kindref="member">f</ref>[0]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>body-&gt;<ref refid="struct_body_1a74c08c3b509575a337bf62d564991340" kindref="member">f</ref>[1]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>body-&gt;<ref refid="struct_body_1a74c08c3b509575a337bf62d564991340" kindref="member">f</ref>[2]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>body;</highlight></codeline>
<codeline lineno="225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227" refid="nbody__lib_8h_1a34414124005e7d0e4e2def0e2b49de8f" refkind="member"><highlight class="normal"><ref refid="struct_body" kindref="compound">Body</ref><sp/>*<ref refid="nbody__lib_8c_1a34414124005e7d0e4e2def0e2b49de8f" kindref="member">nbody_newzerobody</ref>()</highlight></codeline>
<codeline lineno="228"><highlight class="normal">{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_body" kindref="compound">Body</ref><sp/>*body;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>body<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_body" kindref="compound">Body</ref>));</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>body-&gt;<ref refid="struct_body_1a5175b356eac1d83a42608b42a25d00b9" kindref="member">m</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++)</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;<ref refid="struct_body_1ad8b2664bf7d7db7f9685845624616041" kindref="member">v</ref>[i]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;<ref refid="struct_body_1a32028928bab6f6e926f89bf7c52c4138" kindref="member">r</ref>[i]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;<ref refid="struct_body_1a74c08c3b509575a337bf62d564991340" kindref="member">f</ref>[i]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>body;</highlight></codeline>
<codeline lineno="240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242" refid="nbody__lib_8h_1af1fad81653612ede339dde94dd8f76ca" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="nbody__lib_8c_1af1fad81653612ede339dde94dd8f76ca" kindref="member">nbody_printbody</ref>(<ref refid="struct_body" kindref="compound">Body</ref><sp/>*body)</highlight></codeline>
<codeline lineno="243"><highlight class="normal">{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;m:%8.2E<sp/>&quot;</highlight><highlight class="normal">,body-&gt;<ref refid="struct_body_1a5175b356eac1d83a42608b42a25d00b9" kindref="member">m</ref>);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;r:%8.2E<sp/>%8.2E<sp/>%8.2E<sp/>&quot;</highlight><highlight class="normal">,body-&gt;<ref refid="struct_body_1a32028928bab6f6e926f89bf7c52c4138" kindref="member">r</ref>[0],body-&gt;<ref refid="struct_body_1a32028928bab6f6e926f89bf7c52c4138" kindref="member">r</ref>[1],body-&gt;<ref refid="struct_body_1a32028928bab6f6e926f89bf7c52c4138" kindref="member">r</ref>[2]);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;v:%8.2E<sp/>%8.2E<sp/>%8.2E<sp/>&quot;</highlight><highlight class="normal">,body-&gt;<ref refid="struct_body_1ad8b2664bf7d7db7f9685845624616041" kindref="member">v</ref>[0],body-&gt;<ref refid="struct_body_1ad8b2664bf7d7db7f9685845624616041" kindref="member">v</ref>[1],body-&gt;<ref refid="struct_body_1ad8b2664bf7d7db7f9685845624616041" kindref="member">v</ref>[2]);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;f:%8.2E<sp/>%8.2E<sp/>%8.2E<sp/>&quot;</highlight><highlight class="normal">,body-&gt;<ref refid="struct_body_1a74c08c3b509575a337bf62d564991340" kindref="member">f</ref>[0],body-&gt;<ref refid="struct_body_1a74c08c3b509575a337bf62d564991340" kindref="member">f</ref>[1],body-&gt;<ref refid="struct_body_1a74c08c3b509575a337bf62d564991340" kindref="member">f</ref>[2]);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252" refid="nbody__lib_8h_1a160c2cba5e830d622e2df66d7ee9f7e5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="nbody__lib_8c_1a160c2cba5e830d622e2df66d7ee9f7e5" kindref="member">nbody_acceleration</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*a,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*r,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*m,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>G)</highlight></codeline>
<codeline lineno="253"><highlight class="normal">{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,k;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rij2,rij3,acc;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="nbody__lib_8c_1ab5d294221f53bdee8dd85fa5d728f594" kindref="member">nbody_zeros</ref>(a,n*d);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;n-1;i++)</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=i+1;j&lt;n;j++)</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rij2=0.0;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=0;k&lt;d;k++)</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rij2<sp/>+=(r[d*i+k]-r[d*j+k])*(r[d*i+k]-r[d*j+k]);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rij3=sqrt(rij2)*rij2;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=0;k&lt;d;k++)</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acc=G*(r[d*i+k]-r[d*j+k])/rij3;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a[d*j+k]<sp/>+=<sp/>m[i]*acc;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a[d*i+k]<sp/>-=<sp/>m[j]*acc;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276" refid="nbody__lib_8h_1a657cdcb1e74333481abd88338119c35c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="nbody__lib_8c_1a657cdcb1e74333481abd88338119c35c" kindref="member">nbody_energy</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*pot,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*kin,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*tot,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*r,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*v,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*m,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>G)</highlight></codeline>
<codeline lineno="277"><highlight class="normal">{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,k;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rij2,v2;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>*pot=0;<sp/>*kin=0;<sp/>*tot=0;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;n-1;i++)</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=i+1;j&lt;n;j++)</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rij2=0;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=0;k&lt;d;k++)</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rij2<sp/>+=<sp/>pow(r[d*i+k]-r[d*j+k],2);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pot<sp/>-=<sp/>m[i]*m[j]/sqrt(rij2);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>*pot<sp/>*=<sp/>G;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;n;i++)</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=0;k&lt;d;k++)</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v2<sp/>+=<sp/>v[d*i+k]*v[d*i+k];</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*kin<sp/>+=<sp/>m[i]*v2;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>*kin<sp/>*=<sp/>0.5;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>*tot<sp/>=<sp/>(*pot)<sp/>+<sp/>(*kin);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310" refid="nbody__lib_8h_1a8e15606e5734bbface85c518c8f2f481" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="nbody__lib_8c_1a8e15606e5734bbface85c518c8f2f481" kindref="member">nbody_print_body</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*r,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*v,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*a,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)</highlight></codeline>
<codeline lineno="311"><highlight class="normal">{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%10.3E<sp/>%10.3E<sp/>%10.3E<sp/>%10.3E<sp/>%10.3E<sp/>%10.3E<sp/>%10.3E<sp/>%10.3E<sp/>%10.3E\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r[i],r[i+1],r[i+2],v[i],v[i+1],v[i+2],a[i],a[i+1],a[i+2]);</highlight></codeline>
<codeline lineno="314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316" refid="nbody__lib_8h_1a868936f1ea2879aea2257bb0b4d64666" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="nbody__lib_8c_1a868936f1ea2879aea2257bb0b4d64666" kindref="member">nbody_print_energy</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pot0,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>kin0,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tot0,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pot,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>kin,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tot)</highlight></codeline>
<codeline lineno="317"><highlight class="normal">{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;[pot:<sp/>%10.3E]<sp/>[kin:<sp/>%10.3E]<sp/>[tot:<sp/>%10.3E]<sp/>[err:<sp/>%10.3E]\n&quot;</highlight><highlight class="normal">,pot,kin,tot,(tot-tot0)/tot0);</highlight></codeline>
<codeline lineno="319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321" refid="nbody__lib_8h_1ab78dff6daa4cbf2f1c1253f1ba54e16e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="nbody__lib_8c_1ab78dff6daa4cbf2f1c1253f1ba54e16e" kindref="member">nbody_read_ini</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*n,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*d,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**m,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**r,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**v)</highlight></codeline>
<codeline lineno="322"><highlight class="normal">{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*fp;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>fp<sp/>=<sp/>fopen(filename,</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>fscanf(fp,</highlight><highlight class="stringliteral">&quot;%d<sp/>%d&quot;</highlight><highlight class="normal">,n,d);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>*r<sp/>=calloc((*n)*(*d),</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>*m<sp/>=calloc(*n,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>*v<sp/>=calloc((*n)*(*d),</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;<sp/>(*n);<sp/>i++)<sp/>fscanf(fp,</highlight><highlight class="stringliteral">&quot;%lf&quot;</highlight><highlight class="normal">,*m+i);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;<sp/>(*n);i++)</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;j&lt;<sp/>(*d);j++)<sp/>fscanf(fp,</highlight><highlight class="stringliteral">&quot;%lf&quot;</highlight><highlight class="normal">,*r<sp/>+<sp/>(*d)*i+j);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;j&lt;<sp/>(*d);j++)<sp/>fscanf(fp,</highlight><highlight class="stringliteral">&quot;%lf&quot;</highlight><highlight class="normal">,*v<sp/>+<sp/>(*d)*i+j);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340" refid="nbody__lib_8h_1a0bbf0022c12442a1bcad51cc9c04e0bd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="nbody__lib_8c_1a0bbf0022c12442a1bcad51cc9c04e0bd" kindref="member">nbody_read_bodies</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*n,<ref refid="struct_body_list" kindref="compound">BodyList</ref><sp/>**bodylist)</highlight></codeline>
<codeline lineno="341"><highlight class="normal">{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*m,*r,*v;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*fp;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>fp<sp/>=<sp/>fopen(filename,</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>fscanf(fp,</highlight><highlight class="stringliteral">&quot;%d<sp/>%d&quot;</highlight><highlight class="normal">,n,&amp;d);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d<sp/>!=<sp/>3)</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;The<sp/>simulation<sp/>should<sp/>be<sp/>in<sp/>3D&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="nbody__lib_8h_1acf3f0c9aa42e44392831674a627b0c79" kindref="member">NBODY_ERR_INPUT_ISNOT_3D</ref>;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>=calloc(*n,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=calloc((*n)*3,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=calloc((*n)*3,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;<sp/>(*n);<sp/>i++)<sp/>fscanf(fp,</highlight><highlight class="stringliteral">&quot;%lf&quot;</highlight><highlight class="normal">,m+i);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;<sp/>(*n);i++)</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;j&lt;<sp/>3;j++)<sp/>fscanf(fp,</highlight><highlight class="stringliteral">&quot;%lf&quot;</highlight><highlight class="normal">,r<sp/>+<sp/>(3)*i+j);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;j&lt;<sp/>3;j++)<sp/>fscanf(fp,</highlight><highlight class="stringliteral">&quot;%lf&quot;</highlight><highlight class="normal">,v<sp/>+<sp/>(3)*i+j);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>*n<sp/>;i++)</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_body" kindref="compound">Body</ref><sp/>*body<sp/>=<sp/><ref refid="nbody__lib_8c_1a372c1e36d7d677a5c2e6aec56e0c4886" kindref="member">nbody_newbody</ref>(m[i],<sp/>r+3*i,<sp/>v+3*i);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Adding<sp/>body\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//nbody_printbody(body);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="nbody__lib_8c_1aeffd7a0874832315fcc560eb59bdf706" kindref="member">nbody_addbodylist</ref>(bodylist,<sp/>body);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>free(m);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>free(r);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>free(v);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381" refid="nbody__lib_8h_1a9622aef03e176a55548849c8ff8353b2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="nbody__lib_8c_1a9622aef03e176a55548849c8ff8353b2" kindref="member">nbody_leapfrog</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*r,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*v,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*a,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*a1,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*m,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>G)</highlight></codeline>
<codeline lineno="382"><highlight class="normal">{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="nbody__lib_8c_1a160c2cba5e830d622e2df66d7ee9f7e5" kindref="member">nbody_acceleration</ref>(a,r,n,d,m,G);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;n*d;i++)</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r[i]<sp/>+=<sp/>v[i]*dt<sp/>+<sp/>a[i]*0.5*dt*dt;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="nbody__lib_8c_1a160c2cba5e830d622e2df66d7ee9f7e5" kindref="member">nbody_acceleration</ref>(a1,r,n,d,m,G);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;n*d;i++)</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>+=<sp/>(a[i]+a1[i])*0.5*dt;</highlight></codeline>
<codeline lineno="390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392" refid="nbody__lib_8h_1a29d0c25e1dd2d6aefa1d56708364fa60" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="nbody__lib_8c_1a29d0c25e1dd2d6aefa1d56708364fa60" kindref="member">nbody_test_eight</ref>()</highlight></codeline>
<codeline lineno="393"><highlight class="normal">{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>particles<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>dimension<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*r,*v,*a,*m;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>location,<sp/>velocity,<sp/>acceleration<sp/>and<sp/>masses<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*a1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>extra<sp/>acceleration<sp/>needed<sp/>in<sp/>leapfrog<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>current<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt=0.01;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>time<sp/>step<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>T=100;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>duration<sp/>of<sp/>the<sp/>integration<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>G=1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>constant<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pot0,kin0,tot0;<sp/></highlight><highlight class="comment">/*<sp/>potential,<sp/>kinetic,<sp/>total<sp/>energy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pot,kin,tot;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>potential,<sp/>kinetic,<sp/>total<sp/>energy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timeval<sp/>t_start,t_finish,t_elapsed;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="nbody__lib_8c_1ab78dff6daa4cbf2f1c1253f1ba54e16e" kindref="member">nbody_read_ini</ref>(</highlight><highlight class="stringliteral">&quot;data/eight.ini&quot;</highlight><highlight class="normal">,&amp;n,&amp;d,&amp;m,&amp;r,&amp;v);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=calloc(n*d,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>a1=calloc(n*d,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="nbody__lib_8c_1a657cdcb1e74333481abd88338119c35c" kindref="member">nbody_energy</ref>(&amp;pot0,&amp;kin0,&amp;tot0,r,v,n,d,m,G);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="nbody__lib_8c_1a657cdcb1e74333481abd88338119c35c" kindref="member">nbody_energy</ref>(&amp;pot,<sp/>&amp;kin,<sp/>&amp;tot,<sp/>r,v,n,d,m,G);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="nbody__lib_8c_1a868936f1ea2879aea2257bb0b4d64666" kindref="member">nbody_print_energy</ref>(pot0,kin0,tot0,pot,kin,tot);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="nbody__lib_8c_1ab78dff6daa4cbf2f1c1253f1ba54e16e" kindref="member">nbody_read_ini</ref>(</highlight><highlight class="stringliteral">&quot;data/eight.ini&quot;</highlight><highlight class="normal">,&amp;n,&amp;d,&amp;m,&amp;r,&amp;v);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>t=0.0;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>gettimeofday(&amp;t_start,NULL);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(t&lt;T)</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>nbody_forwardeuler(r,v,a,dt,n,d,m,G);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="nbody__lib_8c_1a9622aef03e176a55548849c8ff8353b2" kindref="member">nbody_leapfrog</ref>(r,v,a,a1,dt,n,d,m,G);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>+=<sp/>dt;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>gettimeofday(&amp;t_finish,NULL);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>timersub(&amp;t_finish,<sp/>&amp;t_start,<sp/>&amp;t_elapsed);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%ld.%06ld<sp/>&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)t_elapsed.tv_sec,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)t_elapsed.tv_usec);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="nbody__lib_8c_1a657cdcb1e74333481abd88338119c35c" kindref="member">nbody_energy</ref>(&amp;pot,&amp;kin,&amp;tot,r,v,n,d,m,G);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="nbody__lib_8c_1a868936f1ea2879aea2257bb0b4d64666" kindref="member">nbody_print_energy</ref>(pot0,kin0,tot0,pot,kin,tot);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>free(r);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>free(v);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>free(a);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>free(a1);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>free(m);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439" refid="nbody__lib_8h_1ab5d294221f53bdee8dd85fa5d728f594" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="nbody__lib_8c_1ab5d294221f53bdee8dd85fa5d728f594" kindref="member">nbody_zeros</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*x,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="440"><highlight class="normal">{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;n;i++)</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[i]=0.0;</highlight></codeline>
<codeline lineno="444"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="nbody_lib.c"/>
  </compounddef>
</doxygen>
